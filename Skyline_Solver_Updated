#include <iostream>

using namespace std;

//main function: it takes a set of simultaneous linear equations in sklyine format and solves them
int main()
{
  int n;

  cout<<"Size of matrix = ";
  cin>>n;
  float D[n]; //diagonal elements of matrix
  float ANS[n];
  cout<<n<<"DIagonal elements ";
  for(int i=0;i<n;i++)
  cin>>D[i];
  int noLow;
  cout<<"No. of elements in lower triangle ";
  cin>>noLow;
  cout<<"Elements of Lower triangle";
  float LA[noLow];
  for(int i=0;i<noLow;i++)
  cin>>LA[i];
  cout<<n<<" ELements of Lower triangle index ";
  int LI[n];
  for(int i=0;i<n;i++)
  cin>>LI[i];
  int noUp;
  cout<<"No. of elements in upper triangle ";
  cin>>noUp;
   cout<<"Elements of Upper triangle";
  float UA[noUp];
  for(int i=0;i<noUp;i++)
  cin>>UA[i];
  cout<<n<<" ELements of Upper triangle index ";
  int UI[n];
  for(int i=0;i<n;i++)
  cin>>UI[i];
  float RHS[n];
  cout<<"Elements of RHS ";
  for(int i=0;i<n;i++)
  cin>>RHS[i];

    int diagonal,udiafrom,udiato;
    //FOR LOWER TRIANGLE
    for(int row=1;row<=n-1;row++)
    {
    	cout<<"\n\n\nFor row "<<row<<"\n";
        int lfrom=LI[row-1];
        int lto=LI[row]-1;
        int lne = lto-lfrom +1;
        int ufrom = UI[row];
        int uto = UI[row+1]-1;
        int une = uto - ufrom +1;
        if(row==n-1)
        une =0;
		cout<<"lfrom "<<lfrom<<" lto "<<lto<<" lne "<<lne<<"\n";
		cout<<"ufrom "<<ufrom<<" uto "<<uto<<" une "<<une<<"\n";
        for(int j =0,i=lfrom;i<=lto;i++,j++)
        {
            diagonal = row-lne+j;
            udiafrom = UI[diagonal];
            udiato = UI[diagonal+1]-1;
            int udne = udiato-udiafrom+1;
            cout<<" Diagonal "<<diagonal<<"\n";
			cout<<" udiafrom " <<udiafrom<<" udiato "<<udiato<<" une  "<<une<<"\n";
            float temp = LA[i]/D[diagonal];
            // For diagonal row's diagonal and upper triangle elements
            cout<<"\ntemp: "<<temp<<"\n";
            //diagonal row ends

            //for the row itself: LA diagonal and UA
            LA[i]=0;




				cout<<"Lower\n";
	for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"\nRHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";
            int begincol = row - lne + j +1;
            int endcol = row + une;
			cout<<"begincol "<<begincol<<" endcol "<<row << une << row + une;
            //Subtraction:
            for(int udi = udiafrom,jj=0;udi<=udiato;udi++,jj++)
            {
                int column = diagonal+1+jj;
                if (column == row)
                {
                		cout<<"\n colrow"<<column<<" "<<row<<" "<<diagonal;
                    D[row]=D[row]-(UA[udi]*temp);
                }else if (column <row && column >=begincol)
                {
                	cout<<"\n low";
                    int diff = row - column;
                    cout<<LA[lto-diff+1]<<"ANS\n"<<UA[udi]<<"\n";
                    LA[lto-diff+1]-=UA[udi]*temp;
                    cout<<LA[lto-diff+1]<<"ANS\n";
	            }
                else if (column >row && column <=endcol)
                {
                		cout<<"\n high";
                    int diff = column - row;
                    UA[ufrom+diff-1]-=UA[udi]*temp;
                }
			}
			RHS[row]-=RHS[diagonal]*temp;
				cout<<"Lower\n";
	for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"\nRHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";
        }
    }
	//for n-1 row

	cout<<"UPPPPPPPPPPPPPPPPPPP";
	for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"RHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";
    //FOR UPPER TRIANGLE
    for(int row=n-2;row>=0;row--)
    {
    	cout<<"\n\nRow is "<<row<<"\n";
        int ufrom=UI[row];
        int uto=UI[row+1]-1;
        cout<<"ufrom "<<ufrom<<" uto "<<uto;

        for(int j =0,i=ufrom;i<=uto;i++,j++)
        {
            diagonal = row+j+1;
			cout<<"\nDiagonal "<<diagonal;
            float temp =  UA[i]/D[diagonal];

            //for the row itself: LA diagonal and UA
            cout<<"RHS[row" <<RHS[row]<<"\n";
            cout<<"temp:"<<temp<<"\n";
            RHS[row]-=RHS[diagonal]*temp;

	        UA[i]=0;
        	cout<<"Lower\n";
	for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"RHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";


        }

            for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"RHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";

    }

	cout<<"Lower\n";
	for(int i=0;i<noLow;i++)
	cout<<LA[i]<<" ";
	cout<<endl;
	cout<<"Upper\n";
	for(int i=0;i<noUp;i++)
	cout<<UA[i]<<" ";
	cout<<endl;
	cout<<"Diagonal\n";
	for(int i=0;i<n;i++)
	cout<<D[i]<<" ";
	cout<<"RHS\n";
	for(int i=0;i<n;i++)
	cout<<RHS[i]<<" ";

	/*float ANS[n];
	for(int i=0;i<n;i++)
	ANS[i]=RHS[i]/D[i];*/
	cout<<"ANswer\n";
	for(int i=0;i<n;i++)
	{ANS[i]=RHS[i]/D[i];cout<<ANS[i]<<" ";}
}


