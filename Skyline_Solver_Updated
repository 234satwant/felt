#include <iostream>

using namespace std;

//main function: it takes a set of simultaneous linear equations in sklyine format and solves them
int main()
{
  int n;
  cin>>n;

  float D[n]; //diagonal elements of matrix
  for(int i=0;i<n;i++)
  cin>>D[i];

  int noLow;// no of elements in lower triangular matrix
  cin>>noLow;

  float LA[noLow]; //the lower triangular matrix
  for(int i=0;i<noLow;i++)
  cin>>LA[i];

  int LI[n]; //index array for LA
  for(int i=0;i<n;i++)
  cin>>LI[i];

  int noUp;// no of elements in upper triangle
  cin>>noUp;

  float UA[noUp];//the upper triangular matrix
  for(int i=0;i<noUp;i++)
  cin>>UA[i];

  int UI[n];//index array of UA
  for(int i=0;i<n;i++)
  cin>>UI[i];

  float RHS[n];//the RHS vector
  for(int i=0;i<n;i++)
  cin>>RHS[i];

    int diagonal,udiafrom,udiato;
    //FOR LOWER TRIANGLE
    for(int row=1;row<=n-1;row++)
    {
        int lfrom=LI[row-1];//lower elements of row
        int lto=LI[row]-1;
        int lne = lto-lfrom +1;
        int ufrom = UI[row];//upper elements of row
        int uto = UI[row+1]-1;
        int une = uto - ufrom +1;
        if(row==n-1)
        une =0;
        for(int j =0,i=lfrom;i<=lto;i++,j++)// for each lower element
        {
            diagonal = row-lne+j;//diagonal row
            udiafrom = UI[diagonal];//upper elements of diagonal row
            udiato = UI[diagonal+1]-1;
            int udne = udiato-udiafrom+1;

            float temp = LA[i]/D[diagonal];

            LA[i]=0;

            int begincol = row - lne + j +1;
            int endcol = row + une;
	    
	    //Subtraction: for each element of upper triangle in diagonal row
            for(int udi = udiafrom,jj=0;udi<=udiato;udi++,jj++)
            {
                int column = diagonal+1+jj;
                if (column == row)
                {
                    D[row]=D[row]-(UA[udi]*temp);
                }
                else if (column <row && column >=begincol)
                {
                    int diff = row - column;
                    LA[lto-diff+1]-=UA[udi]*temp;
	            }
                else if (column >row && column <=endcol)
                {
                    int diff = column - row;
                    UA[ufrom+diff-1]-=UA[udi]*temp;
                }
	     }
        	RHS[row]-=RHS[diagonal]*temp;
        }
    }

    //FOR UPPER TRIANGLE
    for(int row=n-2;row>=0;row--)
    {
        int ufrom=UI[row]; //for each element in upper triangle of row
        int uto=UI[row+1]-1;

        for(int j =0,i=ufrom;i<=uto;i++,j++)
        {
            diagonal = row+j+1;
            float temp =  UA[i]/D[diagonal];

            RHS[row]-=RHS[diagonal]*temp;
	        UA[i]=0;
        }
    }
	cout<<"\n\nANswer\n";//display answer 
	for(int i=0;i<n;i++)
	{
	    RHS[i]=RHS[i]/D[i];
	    cout<<RHS[i]<<" ";
        }
	cout<<"\n\n";
}



